// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  mail               String               @id
  name               String?
  username           String?
  points             Decimal
  Stock              Stock[]
  Answer             Answer[]
  UserHistory        UserHistory[]
  QuestionSubmission QuestionSubmission[]
  admin              Boolean
  image              String
  rawImage           String
  winnerPhrase       String?
  Dividend           Dividend[]
  Membership         Membership[]
}

model Dividend {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userMail], references: [mail])
  userMail      String
  candidate     Candidate @relation(fields: [candidateName], references: [name])
  candidateName String
  time          Int
  points        Decimal
}

model Candidate {
  name             String             @id
  picture          String
  Stock            Stock[]
  terminated       Boolean            @default(false)
  locked           Boolean            @default(false)
  CandidateHistory CandidateHistory[]
  Dividend         Dividend[]
}

model Lockup {
  id    Int      @id @default(autoincrement())
  start DateTime
  end   DateTime
}

model Leaderboard {
  id         Int          @id @default(autoincrement())
  name       String
  code       String       @unique @default("TEST")
  Membership Membership[]
}

model Membership {
  User          User        @relation(fields: [userMail], references: [mail])
  userMail      String
  Leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  owner         Boolean     @default(false)

  @@id([userMail, leaderboardId])
}

model UserHistory {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userMail], references: [mail])
  userMail String
  points   Decimal
  time     Int

  @@unique([userMail, time])
}

model CandidateHistory {
  id            Int       @id @default(autoincrement())
  candidate     Candidate @relation(fields: [candidateName], references: [name])
  candidateName String
  amount        Int
  time          Int

  @@unique([candidateName, time])
}

model Stock {
  id            Int       @id @default(autoincrement())
  amount        Int
  user          User      @relation(fields: [userMail], references: [mail])
  userMail      String
  candidate     Candidate @relation(fields: [candidateName], references: [name])
  candidateName String
  active        Boolean   @default(true)

  @@unique([userMail, candidateName])
}

model QuestionSubmission {
  id       Int      @id @default(autoincrement())
  text     String
  option   String[]
  handled  Boolean
  accepted Boolean
  user     User     @relation(fields: [userMail], references: [mail])
  userMail String
}

model Question {
  id       Int      @id @default(autoincrement())
  text     String
  option   String[]
  deadline DateTime
  answerId Int?
  Answer   Answer[]
}

model Answer {
  id          Int      @id @default(autoincrement())
  answerIndex Int
  question    Question @relation(fields: [questionId], references: [id])
  questionId  Int
  user        User     @relation(fields: [userMail], references: [mail])
  userMail    String

  @@unique([userMail, questionId])
}
